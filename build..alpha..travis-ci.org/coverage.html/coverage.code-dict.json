{"/home/travis/build/npmtest/node-npmtest-grunt-aws/test.js":"/* istanbul instrument in package npmtest_grunt_aws */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-grunt-aws/lib.npmtest_grunt_aws.js":"/* istanbul instrument in package npmtest_grunt_aws */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_grunt_aws = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_grunt_aws = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-grunt-aws/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-grunt-aws && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_grunt_aws */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_grunt_aws\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_grunt_aws.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_grunt_aws.rollup.js'] =\n            local.assetsDict['/assets.npmtest_grunt_aws.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_grunt_aws.__dirname + '/lib.npmtest_grunt_aws.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-grunt-aws/node_modules/grunt-aws/tasks/aws.js":"\nvar path = require(\"path\");\n\nmodule.exports = function(grunt) {\n  grunt.loadTasks(path.join(__dirname, \"services\"));\n};\n","/home/travis/build/npmtest/node-npmtest-grunt-aws/node_modules/grunt-aws/tasks/cache-mgr.js":"var fs = require(\"fs\"),\n    path = require(\"path\"),\n    dirPath = path.join(__dirname,\"..\",\"caches\");\n\nif(!fs.existsSync(dirPath))\n  fs.mkdirSync(dirPath);\n\n//retreives/creates a given cache from disk\nexports.get = function(name) {\n  var p = cachePath(name);\n\n  var cache = {};\n  //fetch\n  if(fs.existsSync(p)) {\n    try {\n      cache = JSON.parse(fs.readFileSync(p));\n    } catch(e) {\n      cache = {};\n    }\n  }\n\n  mapObj(cache, name);\n  return cache;\n};\n\n//saves a cache to disk\nexports.put = function(cache) {\n  var name = mapObj(cache);\n  if(!name)\n    throw \"Object not found. Only put objects that have been 'get()'\";\n  var p = cachePath(name);\n  var contents = JSON.stringify(cache, null, 2);\n  fs.writeFileSync(p, contents);\n};\n\n//helpers\nfunction cachePath(name) {\n  return path.join(dirPath,name+\".json\");\n}\n\n//object -> string map\n// mapObj(obj) => get str by obj\n// mapObj(obj, str) => set str\nmapObj.objs = [];\nmapObj.strs = [];\nfunction mapObj(obj, str) {\n  var i = mapObj.objs.indexOf(obj);\n  if(str && i === -1) {\n    mapObj.objs.push(obj);\n    i = mapObj.objs.indexOf(obj);\n    mapObj.strs[i] = str;\n  } else if(i >= 0) {\n    return mapObj.strs[i];\n  }\n  return null;\n}\n","/home/travis/build/npmtest/node-npmtest-grunt-aws/node_modules/grunt-aws/tasks/services/cloudfront.js":"var AWS = require(\"aws-sdk\"),\n    _ = require(\"lodash\"),\n    async = require(\"async\");\n\nmodule.exports = function(grunt) {\n\n  //cloudfront description\n  var DESC = \"grunt-aws's cloudfront\";\n\n  //cloudfront defaults (none at the moment)\n  var DEFAULTS = {};\n\n  //cloudfront task\n  grunt.registerMultiTask(\"cloudfront\", DESC, function() {\n\n    //get options\n    var opts = this.options(DEFAULTS);\n\n    if(_.isEmpty(opts.distributionId))\n      return grunt.log.ok(\"No DistributionId specified\");\n\n    //mark as async\n    var done = this.async();\n\n    //whitelist allowed keys\n    AWS.config.update(_.pick(opts,\n      'accessKeyId',\n      'secretAccessKey'\n    ), true);\n \n    //cloudfront client\n    var cloudfront = new AWS.CloudFront();\n\n    var subtasks = [];\n    subtasks.push(createInvalidations);\n    subtasks.push(createUpdates);\n    async.series(subtasks, done);\n\n    //------------------------------------------------\n\n    //create records defined in opts.invalidations\n    function createInvalidations(callback) {\n      if(!opts.invalidations || !opts.invalidations.length)\n        return callback();\n\n      var params = {\n        DistributionId: opts.distributionId,\n        InvalidationBatch: {\n          CallerReference: Date.now().toString(),\n          Paths: {\n            Quantity: opts.invalidations.length,\n            Items: opts.invalidations\n          }\n        }\n      };\n      cloudfront.createInvalidation(params, function(err, data) {\n        if (err) console.log(err, err.stack);\n        else console.log(data);\n        callback(err);\n      });\n    }\n\n    function createUpdates(callback) {\n      if(!opts.customErrorResponses && !opts.originPath && !opts.defaultRootObject)\n        return callback();\n\n      cloudfront.getDistribution({ Id: opts.distributionId }, function(err, res) {\n        if (err) {\n          console.log(err, err.stack);\n          return callback(err);\n        }\n\n        var params = {\n          Id: opts.distributionId,\n          DistributionConfig: res.Distribution.DistributionConfig,\n          IfMatch: res.ETag\n        };\n\n        if(opts.customErrorResponses){\n          params.DistributionConfig.CustomErrorResponses = {\n            Quantity: opts.customErrorResponses.length,\n            Items: opts.customErrorResponses\n          };\n        }\n\n        if(opts.originPath){\n          params.DistributionConfig.Origins.Items[ 0 ].OriginPath = opts.originPath;\n        }\n\n        if(opts.defaultRootObject){\n          params.DistributionConfig.DefaultRootObject = opts.defaultRootObject;\n        }\n\n        cloudfront.updateDistribution(params, function(err, data) {\n          if (err) console.log(err, err.stack);\n          else console.log(data);\n          callback(err);\n        });\n      });\n\n    }\n\n  });\n\n\n};\n","/home/travis/build/npmtest/node-npmtest-grunt-aws/node_modules/grunt-aws/tasks/services/route53.js":"var AWS = require(\"aws-sdk\"),\n    _ = require(\"lodash\"),\n    async = require(\"async\"),\n    CacheMgr = require(\"../cache-mgr\");\n\nmodule.exports = function(grunt) {\n \n  //route53 description\n  var DESC = \"grunt-aws's route53 for easy setup of domains\";\n\n  //route53 defaults\n  var DEFAULTS = {\n    cache: true,\n    concurrent: 20,\n    dryRun: false,\n    TTL: 300,\n    zones: []\n  };\n\n  //route53 task\n  grunt.registerTask(\"route53\", DESC, function() {\n\n    //get options\n    var opts = this.options(DEFAULTS);\n\n    //stop the task here if no zones were configured\n    if(_.isEmpty(opts.zones))\n      return grunt.log.ok(\"No Route53 zones configured\");\n\n    if (opts.cache && allRecordsInCache()){\n      return grunt.log.ok(\"All Route53 zones found in cache\");\n    }\n\n    //mark as async\n    var done = this.async();\n\n    //dry run prefix\n    var DRYRUN = opts.dryRun ? \"[DRYRUN] \" : \"\";\n\n    //whitelist allowed keys\n    AWS.config.update(_.pick(opts,\n      'accessKeyId',\n      'secretAccessKey'\n    ), true);\n \n    //route53 client\n    var Route53 = new AWS.Route53();\n\n    //create records defined in opts.zones\n    createRecordsForZones(done);\n\n    //------------------------------------------------\n\n    function allRecordsInCache() {\n      return _.all(_.pairs(opts.zones), function(config){\n        var zone = config[0];\n        var records = config[1];\n        var cachedZone = CacheMgr.get('route53:zone:' + zone);\n        if(!cachedZone) return false;\n        var recordNames = _.map(records, function(record){ return record.name || record.Name; });\n        //test that all records for this zone are in the cache\n        return _.isEmpty(_.difference(recordNames, cachedZone.records));\n      });\n    }\n\n    function createRecordsForZones(callback) {\n      async.eachLimit(_.pairs(opts.zones), opts.concurrent, function(config, next){\n        var zone = config[0];\n        var records = config[1];\n        getZoneID(zone, function(err, zoneID){\n          if(err) return next(err);\n          createRecords(zone, zoneID, records, next);\n        });\n      }, callback);\n    }\n\n    function getZoneID(zone, callback) {\n      if (opts.cache){\n        //return zone id if in cache\n        var cache = CacheMgr.get('route53:zone:' + zone);\n        if (cache.id) return callback(null, cache.id);\n      }\n      //get list of zones from route53 and load into cache if cache enabled\n      Route53.listHostedZones(function(err, data){\n        if(err) return callback(err);\n        var zoneDataForCurrentZone;\n        _.each(data.HostedZones, function(zoneData){\n          var zoneName =  zoneData.Name.replace(/\\.$/, '');\n          if (opts.cache){\n            var cache = CacheMgr.get('route53:zone:' + zoneName);\n            if (!cache.id){\n              cache.id = zoneData.Id.replace(/.*\\//, '');\n              CacheMgr.put(cache);\n            }\n          }\n          if (zoneName === zone){\n            zoneDataForCurrentZone = zoneData;\n          }\n        });\n        if(!zoneDataForCurrentZone) return callback('No ID found for zone: ' + zone);\n        callback(null, zoneDataForCurrentZone.Id);\n      });\n    }\n\n    function createRecords(zone, zoneID, records, callback) {\n      //get list of all records for this zone\n      Route53.listResourceRecordSets({ HostedZoneId: zoneID }, function(err, data) {\n        if(err) return callback(err);\n\n        if (opts.cache){\n          //store list of records in cache\n          var cache = CacheMgr.get('route53:zone:' + zone);\n          cache.id = zoneID;\n          cache.records = _.map(data.ResourceRecordSets, function(route53RecordData){\n            //strip trailing period from the name\n            return route53RecordData.Name.replace(/\\.$/, '');\n          });\n          CacheMgr.put(cache);\n        }\n\n        //find all records that don't exist in Route53\n        var recordsToCreate = _.select(records, function(record) {\n          //check for any Route53 record matching this record's name (with period on the end)\n          var checkForName = (record.name || record.Name) + '.';\n          return !_.detect(data.ResourceRecordSets, function(route53RecordData) {\n            return route53RecordData.Name === checkForName;\n          });\n        });\n\n        if(_.isEmpty(recordsToCreate)){\n          grunt.log.ok('All records exist in Route53');\n          return callback();\n        }\n\n        //construct a batch change request with details for each record that needs to be created\n        var batchChangeRequest = {\n          HostedZoneId: zoneID,\n          ChangeBatch: {\n            Changes: _.map(recordsToCreate, createBatchRequestForRecord)\n          }\n        };\n\n        //notify what changes will be made\n        var recordNamesToCreate = _.map(batchChangeRequest.ChangeBatch.Changes, function(change) {\n          return change.ResourceRecordSet.Name;\n        }).join(', ');\n        grunt.log.writeln(DRYRUN + 'Creating Route53 records for ' + recordNamesToCreate + '...');\n\n        //submit the batch change request\n        if (opts.dryRun) return callback();\n        Route53.changeResourceRecordSets(batchChangeRequest, callback);\n      });\n    }\n\n    function createBatchRequestForRecord(record) {\n      var changeRequest = {};\n      _.each(record, function(value, key) {\n        // Treat the options.value property specially\n        if (key === 'value' || key === 'Value'){\n          changeRequest.ResourceRecords = _.map(value, function(dnsValue) {\n            return { Value: dnsValue };\n          });\n        }else{\n          changeRequest[makeAwsFriendly(key)] = value;\n        }\n      });\n      //add default TTL if not specified\n      if (!changeRequest.TTL && !changeRequest.AliasTarget){\n        changeRequest.TTL = opts.TTL;\n      }\n      return { Action: 'CREATE', ResourceRecordSet: changeRequest };\n    }\n\n    function makeAwsFriendly(key) {\n      // capitalize the key the way AWS likes it e.g. name => Name, type => Type etc\n      return key.charAt(0).toUpperCase() + key.slice(1);\n    }\n  });\n\n\n};\n","/home/travis/build/npmtest/node-npmtest-grunt-aws/node_modules/grunt-aws/tasks/services/s3.js":"var AWS = require(\"aws-sdk\"),\n    path = require(\"path\"),\n    async = require(\"async\"),\n    _ = require(\"lodash\"),\n    fs = require(\"fs\"),\n    crypto = require(\"crypto\"),\n    zlib = require(\"zlib\"),\n    CacheMgr = require(\"../cache-mgr\"),\n    mime = require(\"mime\");\n\nmodule.exports = function(grunt) {\n\n  //s3 description\n  var DESC = \"grunt-aws's s3 task for easy deploys\";\n\n  //s3 defaults\n  var DEFAULTS = {\n    access: 'public-read',\n    concurrent: 20,\n    cacheTTL: 60*60*1000,\n    // deleteFirst: true,\n    // deleteMatched: true,\n    dryRun: false,\n    gzip: true,\n    cache: true,\n    overwrite: true,\n    createBucket: false,\n    enableWeb: false,\n    signatureVersion: 'v4'\n  };\n\n  //Action taking place.\n  var action = \"Put\"\n\n  //s3 task\n  grunt.registerMultiTask(\"s3\", DESC, function() {\n\n    //normalize files array (force expand)\n    var files = [];\n    this.files.forEach(function(file) {\n      var cwd = file.cwd || '';\n      files = files.concat(file.src.map(function(src) {\n        var s = path.join(cwd, src),\n            d = (cwd||file.src.length>1) ? ((file.dest||'')+src) : file.dest || src;\n        return {src: s, dest: d};\n      }));\n    });\n\n    //skip directories since there are only files on s3\n    files = files.filter(function(file) {\n      return !grunt.file.isDir(file.src);\n    });\n\n    //mark as async\n    var done = this.async();\n    //get options\n    var opts = this.options(DEFAULTS);\n\n    //checks\n    if(!opts.bucket)\n      grunt.fail.warn(\"No 'bucket' has been specified\");\n\n    //custom mime types\n    if(typeof opts.mime === 'object')\n      mime.define(opts.mime);\n    if(typeof opts.mimeDefault === 'string')\n      mime.default_type = opts.mimeDefault;\n\n    //whitelist allowed keys\n    AWS.config.update(_.pick(opts,\n      'accessKeyId',\n      'secretAccessKey',\n      'sessionToken',\n      'region',\n      'sslEnabled',\n      'maxRetries',\n      'httpOptions'\n    ), true);\n\n    //s3 client\n    var S3 = new AWS.S3({signatureVersion: opts.signatureVersion});\n\n    //dry run prefix\n    var DRYRUN = opts.dryRun ? \"[DRYRUN] \" : \"\";\n\n    //retrieve cache for this bucket\n    var cache = CacheMgr.get(opts.bucket);\n\n    if(!cache.options)\n      cache.options = {};\n    if(!cache.prefixes)\n      cache.prefixes = {};\n    if(!cache.files)\n      cache.files = {};\n\n    //base object (lacks Body and Key)\n    var baseObject = {\n      ACL: opts.access,\n      Bucket: opts.bucket\n    };\n\n    //set gzip encoding\n    if(opts.gzip)\n      baseObject.ContentEncoding = 'gzip';\n\n    //use allowed headers\n    if(typeof opts.headers === 'object')\n      _.extend(baseObject, _.pick(\n        opts.headers,\n        //http://docs.aws.amazon.com/AWSJavaScriptSDK/latest/AWS/S3.html#putObject-property\n        'ContentLength',\n        'ContentType',\n        'ContentDisposition',\n        'ContentEncoding',\n        'CacheControl',\n        'Expires',\n        'GrantFullControl',\n        'GrantRead',\n        'GrantReadACP',\n        'GrantWriteACP',\n        'ServerSideEncryption',\n        'StorageClass',\n        'WebsiteRedirectLocation'\n      ));\n\n    //convert numbers and dates\n    if(typeof baseObject.CacheControl === 'number')\n      baseObject.CacheControl = \"max-age=\"+baseObject.CacheControl+\", public\";\n    else if (typeof baseObject.CacheControl === 'object') {\n      var val = baseObject.CacheControl,\n          maxage = val.MaxAge || null,\n          swr = val.StaleWhileRevalidate || null;\n      if (!maxage) {\n        grunt.fail.warn(\"max_age is required for Cache-Control header\");\n      }\n      if (swr) {\n        baseObject.CacheControl = \"max-age=\"+maxage+\", stale-while-revalidate=\"+swr+\", public\";\n      } else {\n        baseObject.CacheControl = \"max-age=\"+maxage+\", public\";\n      }\n    }\n\n    if(baseObject.Expires instanceof Date)\n      baseObject.Expires = baseObject.Expires.toUTCString();\n\n    //use meta data headers\n    if(typeof opts.meta === 'object')\n      baseObject.Metadata = opts.meta;\n\n    //calculate options hash\n    var optionsHash = hash(JSON.stringify(baseObject), 'sha256');\n    var currOptionsHash = cache.options[this.target];\n\n    //maintain stats\n    var stats = { puts: 0, dels: 0, refreshed: false, newOptions: optionsHash !== currOptionsHash };\n\n    if(stats.newOptions)\n      cache.options[this.target] = optionsHash;\n\n    var subtasks = [];\n\n    //create the bucket if it does not exist\n    if(opts.createBucket)\n      subtasks.push(createBucket);\n\n    //enable webhosting\n    if(opts.enableWeb)\n      subtasks.push(enableWebHosting);\n\n    if(!opts.cache && files.length)\n      subtasks.push(getFileList);\n\n    if(files.length)\n      subtasks.push(copyAllFiles);\n\n    //start!\n    async.series(subtasks, taskComplete);\n\n    //------------------------------------------------\n\n    function createBucket(callback) {\n      var params = {\n        Bucket: opts.bucket,\n        ACL: opts.access\n      };\n      if (opts.region && opts.region !== 'us-east-1')\n          params.CreateBucketConfiguration = { LocationConstraint: opts.region };\n      //check the bucket doesn't exist first\n      S3.listBuckets(function(err, data){\n        if(err) {\n          err.message = 'createBucket:S3.listBuckets: ' + err.message;\n          return callback(err);\n        }\n        var existingBucket = _.detect(data.Buckets, function(bucket){\n          return opts.bucket === bucket.Name;\n        });\n        if(existingBucket){\n          grunt.log.writeln('Existing bucket found.');\n          callback();\n        }else{\n          grunt.log.writeln('Creating bucket ' + opts.bucket + '...');\n          //create the bucket using the bucket, access and region options\n          if (opts.dryRun) return callback();\n          S3.createBucket(params, function(err, data){\n            if(err) {\n              err.message = 'createBucket:S3.listBuckets:S3.createBucket: ' + err.message;\n              return callback(err);\n            }\n            grunt.log.writeln('New bucket\\'s location is: ' + data.Location);\n            // Disable caching if bucket is newly created\n            opts.cache = false;\n            callback();\n          });\n        }\n      });\n    }\n\n    function enableWebHosting(callback) {\n      var defaultWebOptions = {\n        \"grunt-overwrite\": false,\n        IndexDocument: { Suffix : 'index.html' }\n      };\n      var webOptions = _.isObject(opts.enableWeb) ? opts.enableWeb : defaultWebOptions;\n\n      S3.getBucketWebsite({ Bucket:opts.bucket }, function(err){\n        if ((err && err.name === 'NoSuchWebsiteConfiguration') || webOptions[\"grunt-overwrite\"]){\n          delete webOptions[\"grunt-overwrite\"];\n          //opts.enableWeb can be the params for WebsiteRedirectLocation.\n          //Otherwise, just set the index.html as default suffix\n          grunt.log.writeln('Enabling website configuration on ' + opts.bucket + '...');\n          if (opts.dryRun) return callback();\n          S3.putBucketWebsite({\n            Bucket: opts.bucket,\n            WebsiteConfiguration: webOptions\n          }, callback);\n        } else {\n          if(err){\n            err.message = 'enableWebHosting:S3.getBucketWebsite: ' + err.message;\n          }\n          return callback(err);\n        }\n      });\n    }\n\n    function getFileList(callback) {\n      //calculate prefix\n      var prefix = null, pindex = Infinity;\n      files.forEach(function(file) {\n        if(prefix === null) {\n          prefix = file.dest;\n          return;\n        }\n        var i = 0;\n        while(i < prefix.length &&\n              i < file.dest.length &&\n              file.dest.charAt(i) === prefix.charAt(i)) i++;\n        pindex = Math.min(i, pindex);\n      });\n      prefix = prefix.substr(0, pindex);\n\n      //get prefix's earliest refresh time\n      var refreshedAt = 0;\n      for(var p in cache.prefixes)\n        if(prefix.indexOf(p) === 0)\n          refreshedAt = Math.max(refreshedAt, cache.prefixes[p]);\n\n      //already have list\n      if(cache.files &&\n         refreshedAt &&\n         opts.cacheTTL &&\n         opts.cacheTTL > (Date.now() - refreshedAt)) {\n        grunt.verbose.writeln(\"Using cached object list prefixed with '\" + prefix + \"'\");\n        return callback();\n      }\n\n      //fetch all objects, beginning with key ''\n      fetchObjects('');\n\n      function fetchObjects(marker) {\n        var msg = \"Retrieving list of existing objects\";\n        msg += prefix ? \" prefixed with '\" + prefix + \"'\" : \"\";\n        msg += marker ? (\" after '\" + marker + \"'\") : \"\";\n        msg += \"...\";\n        grunt.log.writeln(msg);\n\n        S3.listObjects({\n          Bucket: opts.bucket,\n          Marker: marker,\n          Prefix: prefix\n        }, function(err, objs) {\n          if(err) {\n            err.message = 'getFileList:fetchObjects:S3.listObjects: ' + err.message;\n            return callback(err);\n          }\n\n          //store results\n          objs.Contents.forEach(function(obj) {\n            cache.files[obj.Key] = JSON.parse(obj.ETag);\n          });\n          cache.prefixes[prefix] = Date.now();\n          stats.refreshed = true;\n\n          if(objs.IsTruncated)\n            fetchObjects(objs.Contents.pop().Key);\n          else\n            callback();\n        });\n      }\n    }\n\n    function copyAllFiles(callback) {\n      //asynchrously loop through all files\n      async.eachLimit(files, opts.concurrent, getFile, callback);\n    }\n\n    function getFile(file, callback) {\n      //extract src and dest\n      var src = file.src,\n          contents = fs.readFileSync(src),\n          dest = file.dest;\n\n      if(opts.gzip) {\n        zlib.gzip(contents, function(err, compressed) {\n          copyFile(src, compressed, dest, callback);\n        });\n      } else {\n        copyFile(contents, contents, dest, callback);\n      }\n    }\n\n    function copyFile(src, contents, dest, callback) {\n\n      //skip existing files\n      var etag = cache.files[dest];\n      if(opts.cache &&\n         !stats.newOptions &&\n         etag && etag === hash(contents, 'md5')) {\n        grunt.log.ok(DRYRUN + \"No change '\" + dest + \"'\");\n        callback();\n        return;\n      }\n\n      if(!opts.overwrite && etag) {\n        grunt.log.ok(DRYRUN + \"File already exists '\" + dest + \"'\");\n        callback();\n        return;\n      }\n\n      //fake successful upload\n      if(opts.dryRun)\n        return putComplete();\n\n      //extend the base object\n      var object = Object.create(baseObject);\n      object.Key = dest;\n\n      if(!object.ContentType)\n        object.ContentType = mime.lookup(dest);\n\n      // Set the charset, default text type mime types to UTF-8\n      var charset = mime.charsets.lookup(object.ContentType, '') || opts.charset;\n      if (charset) object.ContentType += '; charset=' + charset;\n\n      if (opts.copyFrom || opts.copyFile) {\n        if (opts.copyFrom) {\n          var copySource = src.split('/');\n          copySource[0] =  opts.copyFrom;\n          copySource = copySource.join('/');\n        } else {\n          copySource = opts.copyFile;\n        }\n        object.MetadataDirective  = \"REPLACE\";\n        object.CopySource = copySource;\n        action = \"Copy\";\n        S3.copyObject(object, putComplete)\n      } else {\n        //upload!\n        object.Body = contents;\n        S3.putObject(object, putComplete);\n      }\n\n      function putComplete(err, results) {\n        if(err) {\n          return callback(\"Put '\" + dest + \"' failed...\\n\" + err + \"\\n \");\n        }\n        grunt.log.ok(DRYRUN + action + \" '\" + dest + \"'\");\n        if(!opts.dryRun)\n          stats.puts++;\n        if(results)\n          cache.files[dest] = JSON.parse(results.ETag);\n\n        if(stats.puts % 5 == 0) {\n          // Periodically update the cache\n          CacheMgr.put(cache);\n        }\n\n        callback();\n      }\n\n    }\n\n    function taskComplete(err) {\n      if(err) {\n        grunt.fail.warn(err);\n        return done(false);\n      }\n\n      //all done\n      grunt.log.ok(action + \" \" + stats.puts + \" files\");\n      if(opts.cache && (stats.puts || stats.dels || stats.refreshed || stats.newOptions))\n        CacheMgr.put(cache);\n      done(err);\n    }\n  });\n};\n\n//helper functions\nfunction hash(buff, algo) {\n  var h = crypto.createHash(algo);\n  h.update(buff);\n  return h.digest('hex');\n}\n","/home/travis/build/npmtest/node-npmtest-grunt-aws/node_modules/grunt-aws/tasks/services/sns.js":"var AWS = require(\"aws-sdk\"),\n    _ = require(\"lodash\"),\n    async = require(\"async\");\n\nmodule.exports = function(grunt) {\n\n  //sns description\n  var DESC = \"grunt-aws's sns\";\n\n  //sns defaults (none at the moment)\n  var DEFAULTS = {};\n\n  //sns task\n  grunt.registerTask(\"sns\", DESC, function() {\n\n    //get options\n    var opts = this.options(DEFAULTS);\n\n    if(_.isEmpty(opts.target))\n      return grunt.log.ok(\"No target specified\");\n\n    if(_.isEmpty(opts.message))\n      return grunt.log.ok(\"No message specified\");\n\n    if(_.isEmpty(opts.subject))\n      return grunt.log.ok(\"No subject specified\");\n\n    //mark as async\n    var done = this.async();\n\n    //whitelist allowed keys\n    AWS.config.update(_.pick(opts,\n      'accessKeyId',\n      'secretAccessKey',\n      'region'\n    ), true);\n\n    //sns client\n    var sns = new AWS.SNS();\n\n    //create records defined in opts.invalidations\n    publishTopic(done);\n\n    //------------------------------------------------\n\n    function publishTopic(callback) {\n      var params = {\n        TargetArn: opts.target,\n        Message: opts.message,\n        Subject: opts.subject\n      };\n      sns.publish(params, function(err, data) {\n        if (err) console.log(err, err.stack);\n        else console.log(data);\n        callback(err);\n      });\n    }\n  });\n\n\n};\n"}